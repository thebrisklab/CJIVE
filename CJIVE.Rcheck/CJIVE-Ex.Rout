
R version 4.1.3 (2022-03-10) -- "One Push-Up"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CJIVE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "CJIVE-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('CJIVE')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GenToyDatBinRank")
> ### * GenToyDatBinRank
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GenToyDatBinRank
> ### Title: Generate 'Toy' Data
> ### Aliases: GenToyDatBinRank
> 
> ### ** Examples
> 
> ToyDat = GenToyDatBinRank(n = 200, p1 = 2000, p2 = 1000, JntVarEx1 = 0.05, JntVarEx2 = 0.05,
+                            IndVarEx1 = 0.25, IndVarEx2 = 0.25, jnt_rank = 1, equal.eig = FALSE,
+                            ind_rank1 = 2, ind_rank2 = 3, SVD.plots = TRUE, Error = TRUE,
+                            print.cor = TRUE)
[1] "The correlation between subject scores is given by"
              Jnt Score 1 Ind X Score 1 Ind X Score 2 Ind Y Score 1
Jnt Score 1        1.0000        0.1229       -0.0737       -0.0537
Ind X Score 1      0.1229        1.0000        0.0587        0.0218
Ind X Score 2     -0.0737        0.0587        1.0000        0.1276
Ind Y Score 1     -0.0537        0.0218        0.1276        1.0000
Ind Y Score 2      0.0222        0.0944        0.0544        0.0292
Ind Y Score 3      0.0531        0.0873       -0.0666       -0.0127
              Ind Y Score 2 Ind Y Score 3
Jnt Score 1          0.0222        0.0531
Ind X Score 1        0.0944        0.0873
Ind X Score 2        0.0544       -0.0666
Ind Y Score 1        0.0292       -0.0127
Ind Y Score 2        1.0000        0.0163
Ind Y Score 3        0.0163        1.0000
> ToyDat = GenToyDatBinRank(n = 200, p1 = 2000, p2 = 1000, JntVarEx1 = 0.05, JntVarEx2 = 0.05,
+                            IndVarEx1 = 0.25, IndVarEx2 = 0.25, jnt_rank = 1, equal.eig = FALSE,
+                            ind_rank1 = 2, ind_rank2 = 3, SVD.plots = TRUE, Error = TRUE,
+                            print.cor = TRUE)
[1] "The correlation between subject scores is given by"
              Jnt Score 1 Ind X Score 1 Ind X Score 2 Ind Y Score 1
Jnt Score 1        1.0000        0.0895       -0.0537       -0.0585
Ind X Score 1      0.0895        1.0000        0.0547       -0.0215
Ind X Score 2     -0.0537        0.0547        1.0000        0.0919
Ind Y Score 1     -0.0585       -0.0215        0.0919        1.0000
Ind Y Score 2      0.0765       -0.0063       -0.0826       -0.0947
Ind Y Score 3     -0.1146       -0.0401        0.0083        0.0584
              Ind Y Score 2 Ind Y Score 3
Jnt Score 1          0.0765       -0.1146
Ind X Score 1       -0.0063       -0.0401
Ind X Score 2       -0.0826        0.0083
Ind Y Score 1       -0.0947        0.0584
Ind Y Score 2        1.0000        0.0676
Ind Y Score 3        0.0676        1.0000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GenToyDatBinRank", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MatVar2")
> ### * MatVar2
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MatVar2
> ### Title: Matrix variation (i.e. Frobenius norm)
> ### Aliases: MatVar2
> 
> ### ** Examples
> 
> X = matrix(rnorm(10), 5,2)
> MatVar2(X)
[1] 5.658606
> X = matrix(rnorm(10), 5,2)
> MatVar2(X)
[1] 10.914
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MatVar2", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cc.jive")
> ### * cc.jive
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cc.jive
> ### Title: Canonical (Correlation) JIVE
> ### Aliases: cc.jive
> 
> ### ** Examples
> 
> # Simulate data sets
> ToyDat = GenToyDatBinRank(n = 200, p1 = 2000, p2 = 1000, JntVarEx1 = 0.05, JntVarEx2 = 0.05,
+                            IndVarEx1 = 0.25, IndVarEx2 = 0.25, jnt_rank = 1, equal.eig = FALSE,
+                            ind_rank1 = 2, ind_rank2 = 3, SVD.plots = TRUE, Error = TRUE,
+                            print.cor = TRUE)
[1] "The correlation between subject scores is given by"
              Jnt Score 1 Ind X Score 1 Ind X Score 2 Ind Y Score 1
Jnt Score 1        1.0000        0.1229       -0.0737       -0.0537
Ind X Score 1      0.1229        1.0000        0.0587        0.0218
Ind X Score 2     -0.0737        0.0587        1.0000        0.1276
Ind Y Score 1     -0.0537        0.0218        0.1276        1.0000
Ind Y Score 2      0.0222        0.0944        0.0544        0.0292
Ind Y Score 3      0.0531        0.0873       -0.0666       -0.0127
              Ind Y Score 2 Ind Y Score 3
Jnt Score 1          0.0222        0.0531
Ind X Score 1        0.0944        0.0873
Ind X Score 2        0.0544       -0.0666
Ind Y Score 1        0.0292       -0.0127
Ind Y Score 2        1.0000        0.0163
Ind Y Score 3        0.0163        1.0000
> # Store simulated data sets in an object called 'blocks'
> blocks <- ToyDat$'Data Blocks'
> 
> # Save Subject scores as R objects
> JntScores = ToyDat[['Scores']][['Joint']]
> IndivScore.X = ToyDat[['Scores']][["Indiv_1"]]
> IndivScore.Y = ToyDat[['Scores']][["Indiv_2"]]
> 
> # Save joint variable loadings as R objects
> JntLd.X = t(ToyDat$Loadings$Joint_1)
> JntLd.Y = t(ToyDat$Loadings$Joint_2)
> 
> # Save individual variable loadings as R objects
> IndivLd.X =t(ToyDat$Loadings$Indiv_1)
> IndivLd.Y = t(ToyDat$Loadings$Indiv_2)
> 
> ## Check that proportions of variation explained are (approximately) equal to intended values
> JVE.X = MatVar(JX)/MatVar(blocks[[1]])
Error in MatVar(JX) : could not find function "MatVar"
Execution halted
