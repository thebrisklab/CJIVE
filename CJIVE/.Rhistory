unique(sim.all.norms.gg$Type)
sim.all.norms.gg$Method = sub(".Free.", "-Free", sim.all.norms.gg$Method)
sim.all.norms.gg$Method = sub("R.JIVE-Oracl", "R.JIVE-Oracle", sim.all.norms.gg$Method)
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote())
levels(sim.all.norms.gg$JVE_1)
t(levels(sim.all.norms.gg$JVE_1))
t(t(levels(sim.all.norms.gg$JVE_1)))
t(t(levels(sim.all.norms.gg$JVE_2)))
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = labels(norm.dat$JVE_2), cols = labels(norm.dat$JVE_2))
)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = labels(norm.dat$JVE_2), cols = labels(norm.dat$JVE_2))) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labels(norm.dat$JVE_2)), cols = labels(norm.dat$JVE_2))) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labels(norm.dat$JVE_2)), cols = labels(norm.dat$JVE_2)))
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labels(norm.dat$JVE_2)), cols = labels(norm.dat$JVE_2))) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex)
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
labs.rows = labels(norm.dat$JVE_2)
labs.cols = labels(norm.dat$JVE_1)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols)))
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
labs.rows = labels(norm.dat$JVE_2)
labs.cols = labels(norm.dat$JVE_1)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols)))
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
debugSource("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols)))
norm.dat = sim.all.norms.gg
cols = cb.cols
text.size = 15
lty = 1
y.max = 0.7
labs = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)]
labs.ex = c(expression("Joint Subj Scores"), expression("Joint Loadings"*"X"[1]), expression("Joint Loadings"*"X"[2]),
expression("Indiv Subj Scores"*"X"[1]), expression("Indiv Subj Scores"*"X"[2]),
expression("Indiv Loadings"*"X"[1]), expression("Indiv Loadings"*"X"[2]))
labs.rows = levels(norm.dat$JVE_2)
labs.cols = levels(norm.dat$JVE_1)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols)))
show.legend = FALSE
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols)))
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols))) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex)
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_bquote(rows = .(labs.rows), cols = .(labs.cols))) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_parsed) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_parsed) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
show.legend = TRUE
ggplot2::ggplot(data = norm.dat, ggplot2::aes(x = norm.dat$Type, y = norm.dat$Norm)) +
ggplot2::geom_boxplot(ggplot2::aes(fill = norm.dat$Method), position = "dodge", outlier.alpha = 0, show.legend = show.legend, linetype = lty,
fatten = 0.5) +
ggplot2::labs(y = "Chordal Norm", x = "Type") +
ggplot2::facet_grid(JVE_2 ~ JVE_1, labeller = ggplot2::label_parsed) +
ggplot2::scale_x_discrete(limits = levels(norm.dat$Type)[c(3,6,7,1,2,4,5)], labels = labs.ex) +
ggplot2::scale_fill_manual(values=cols) +
ggplot2::scale_colour_manual(values=cols) +
ggplot2::theme_bw() + ggplot2::coord_cartesian(ylim = c(0, y.max)) +
ggplot2::theme(axis.title.x = ggplot2::element_blank(), axis.text.x = ggplot2::element_text(face = "bold", hjust = 01, angle = 70, size = text.size-3),
text = ggplot2::element_text(size = text.size))
table(norm.dat$Method)
table(norm.dat$Method, norm.dat$Type)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.norm.plot(sim.all.norms.gg, cb.cols, text.size = 15, lty = 1, y.max = 0.7)
#############################################################################################################################
### compare methods of implementing JIVE analysis on simulated datasets                  ####################################
### Author: Raphiel J. Murden                                                            ####################################
### Supervised by Benjamin Risk                                                          ####################################
#############################################################################################################################
library(r.jive); library(ggplot2); library(xtable); library(tidyr); library(dplyr); library(stringr); library(CJIVE)
# imgs.fldr = "C:/Users/rmurd/Dropbox/Apps/Overleaf/CJIVE Manuscript/Images"
# "H:/My Documents/"
prog.dir = "~/GitHub/CJIVE/HCP_FCvSC_DataAnalysis/Programs"
# source("Functions_for_PJIVE.R")
# source("Functions_for_CJIVE.R")
ajive.dir = "C:/Users/rmurd/Dropbox/Applications2/r_AJIVE/R"
files= list.files(ajive.dir)
for (i in files) source(file.path(ajive.dir, i))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cb.cols = cbPalette[c(2:5,7,6)]
########################################################################################################################
########################################################################################################################
########################################################################################################################
########################################################################################################################
######Rank 3: p1 = 200, p2 = 10000
results.dir = "~/GitHub/HCP_FCvSC_DataAnalysis/Results/AllSimResults_31MAY2022/JointRank3_GaussGauss_n200/"
imgs.fldr = results.dir
########################################################################################################################
#############################Simulation Results for Joint Variance Explained = 0.5 in both data sets (Total R^2 = 0.75)#
########################################################################################################################
sim.results.0505 = GetSimResults_Dir(file.path(results.dir, "SimBin_P1200_P210000.05.05"), 200, 10000, Preds = TRUE)
##############################################################################################################################
#############################Simulation Results for Joint Variance Explained = 0.05 in data set 1 and 0.5 in dataset 2 #######
##############################################################################################################################
sim.results.00505 = GetSimResults_Dir(file.path(results.dir,"SimBin_P1200_P210000.005.05"), 200, 10000, Preds = TRUE)
##############################################################################################################################
#############################Simulation Results for Joint Variance Explained = 0.05 in both data sets                  #######
##############################################################################################################################
sim.results.05005 = GetSimResults_Dir(file.path(results.dir,"SimBin_P1200_P210000.05.005"), 200, 10000, Preds = TRUE)
####################################################################################################################
#############################Simulation Results for Joint Variance Explained = 0.05 in both data sets (Total R^2 = 0.75)
####################################################################################################################
sim.results.005005 = GetSimResults_Dir(file.path(results.dir,"SimBin_P1200_P210000.005.005"), 200, 10000, Preds = TRUE)
##############################################################################################################################
#############################Make Plots and Images    ########################################################################
##############################################################################################################################
AllSims = cbind(sim.results.005005, sim.results.05005, sim.results.00505, sim.results.0505)
AllSims.rows = rbind(sim.results.005005, sim.results.05005, sim.results.00505, sim.results.0505)
AllSims.rows$R.JIVE.Tot.Rank.X = AllSims.rows$R.JIVE.Free.Indiv.Rank.X + AllSims.rows$R.JIVE.Free.Joint.Rank
AllSims.rows$R.JIVE.Tot.Rank.Y = AllSims.rows$R.JIVE.Free.Indiv.Rank.Y + AllSims.rows$R.JIVE.Free.Joint.Rank
JntVar200.Table = aggregate(formula = Joint.Var.Exp.X ~ JntVarEx1 + JntVarEx2, data = AllSims.rows, FUN = function(x) round(mean(x),3))
JntVar200.Table = cbind(JntVar200.Table, aggregate(formula = Joint.Var.Exp.X ~ JntVarEx1 + JntVarEx2, data = AllSims.rows, FUN = sd)[3])
colnames(JntVar200.Table)[3:4] = c("Mean X_1","S.D. X_1")
JntVar200.Table = cbind(JntVar200.Table, aggregate(formula = Joint.Var.Exp.Y ~ JntVarEx1 + JntVarEx2, data = AllSims.rows, FUN = mean)[3])
JntVar200.Table = cbind(JntVar200.Table, aggregate(formula = Joint.Var.Exp.Y ~ JntVarEx1 + JntVarEx2, data = AllSims.rows, FUN = sd)[3])
colnames(JntVar200.Table)[5:6] = c("Mean X_2","S.D. X_2")
JntVar200.Table = round(JntVar200.Table,3)
Time.Table.Mean.1 = aggregate(cbind(CC_Oracle_Time, CC_Over_Time, AJIVE_Oracle_Time, AJIVE_Over_Time, R.JIVE_Free_Time, R.JIVE_Oracle_Time)
~ JntVarEx1 + JntVarEx2 + p2, data = AllSims.rows,
FUN = function(x) paste0(round(mean(x/60), 1), " (" , round(sd(x/60), 2), ")"))
sim.gg.data = ConvSims_gg(AllSims)
sim.ranks.gg = sim.gg.data[["Ranks"]]
##Now, reshape data so that plots come out correctly
count_ranks = count(sim.ranks.gg, Rank, Method, JVE_1, JVE_2)
count_ranks = complete(count_ranks, Rank, Method, JVE_1, JVE_2)
count_ranks$Method = sub(".Free", "-Free", count_ranks$Method)
sim.names = colnames(AllSims)
#CompEvals.names = c(sim.names[grep("Scores", sim.names)], sim.names[grep("Loads", sim.names)])
num.sims = dim(AllSims)[1]
p1 = unique(AllSims$p1)
p2 = unique(AllSims$p2)
JVE_1 =  c(as.matrix(AllSims[,grep("JntVarEx1",sim.names)]))
JVE1.labs = c(bquote("R"[J1]^2*"=0.05, p"[1]*"="*.(p1)), bquote("R"[J1]^2*"=0.5, p"[1]*"="*.(p1)))
JVE_1 = factor(JVE_1, labels = JVE1.labs, levels = c(0.05, 0.5))
JVE_2 = c(as.matrix(AllSims[,grep("JntVarEx2",sim.names)]))
JVE2.labs = c(bquote("R"[J2]^2*"=0.05, p"[2]*"="*.(p2)), bquote("R"[J2]^2*"=0.5, p"[2]*"="*.(p2)) )
JVE_2 = factor(JVE_2, labels = JVE2.labs, levels = c(0.05, 0.5))
IVE_1 = c(as.matrix(AllSims[,grep("Indiv.Var.Exp.X", sim.names)]))
IVE_1 = round(as.numeric(IVE_1), 2)
IVE_2 = c(as.matrix(AllSims[,grep("Indiv.Var.Exp.Y", sim.names)]))
IVE_2 = round(as.numeric(IVE_2), 2)
if("True.Joint.Rank" %in% sim.names){
sim.names.2 = sim.names[-grep("True.Joint.Rank", sim.names)]
AllSims.2 = AllSims[,which(sim.names %in% sim.names.2)]
Method = sim.names.2[grep("Joint.Rank", sim.names.2)]
temp = colnames(AllSims.2)
Rank = factor(c(as.matrix(AllSims.2[,temp[grep("Joint.Rank", temp)]])))
} else {
Method = sim.names[grep("Joint.Rank", sim.names)]
Rank = factor(c(as.matrix(AllSims[,grep("Joint.Rank", sim.names)])))
}
unique(Method)
Method = sub(".Joint.Rank", "", Method, fixed = TRUE);  Method = sub("aJI", "AJI", Method, fixed = TRUE)
Method = sub("Correct", "", Method, fixed = TRUE); Method = sub(".Wrong", "-Over", Method, fixed = TRUE)
Method = sub(".oracle", "-Oracle", Method, fixed = TRUE); Method = sub(".over", "-Over", Method, fixed = TRUE)
Method = sub("Elbow", "Oracle", Method, fixed = TRUE); Method = sub(".95.", "-Over", Method, fixed = TRUE)
Method = sub("iJI", "R.JI", Method, fixed = TRUE); Method = sub("AJIVE.", "AJIVE-", Method, fixed = TRUE)
Method = sub("CC", "CJIVE", Method, fixed = TRUE); Method = sub("cJIVE", "CJIVE", Method, fixed = TRUE)
Method[which(Method == "CJIVE.Oracle")] = "CJIVE-Oracle"
Method[which(Method == "CJIVE.Oracle")] = "CJIVE-Oracle"
Method[which(Method %in% c("CJIVE.Over", "cJIVE.Over"))] = "CJIVE-Over"
Method = as.factor(Method)
levels(Method)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
levels(Method) = c(expression("AJIVE-r"[k]),"AJIVE-Over",expression("CJIVE-r"[k]),"CJIVE-Over","R.JIVE.Free")
sim.ranks.gg = data.frame(Rank = Rank, Method = rep(Method, each = num.sims), JVE_1 = rep(JVE_1, each = length(levels(Method))),
JVE_2 = rep(JVE_2, each = length(levels(Method))),
IVE_1 = rep(IVE_1, each = length(levels(Method))),
IVE_2 = rep(IVE_2, each = length(levels(Method))))
if("True.Joint.Rank" %in% sim.names){
True_Rank = c(as.numeric(as.matrix(AllSims[,grep("True.Joint.Rank", sim.names)])))
True_Rank = factor(True_Rank)
sim.ranks.gg$True_Rank = rep(True_Rank, each = length(levels(Method)))
}
count_ranks = count(sim.ranks.gg, Rank, Method, JVE_1, JVE_2)
count_ranks = complete(count_ranks, Rank, Method, JVE_1, JVE_2)
count_ranks$Method = sub(".Free", "-Free", count_ranks$Method)
gg.rank.plot(count_ranks, cb.cols, T, text.size = 15, num.sims = 100)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.rank.plot(count_ranks, cb.cols, T, text.size = 15, num.sims = 100)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.rank.plot(count_ranks, cb.cols, T, text.size = 15, num.sims = 100)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
gg.rank.plot(count_ranks, cb.cols, T, text.size = 15, num.sims = 100)
?scale_fill_manual
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
sim.gg.data = ConvSims_gg(AllSims)
sim.ranks.gg = sim.gg.data[["Ranks"]]
##Now, reshape data so that plots come out correctly
count_ranks = count(sim.ranks.gg, Rank, Method, JVE_1, JVE_2)
count_ranks = complete(count_ranks, Rank, Method, JVE_1, JVE_2)
count_ranks$Method = sub(".Free", "-Free", count_ranks$Method)
sim.names = colnames(AllSims)
#CompEvals.names = c(sim.names[grep("Scores", sim.names)], sim.names[grep("Loads", sim.names)])
num.sims = dim(AllSims)[1]
p1 = unique(AllSims$p1)
p2 = unique(AllSims$p2)
JVE_1 =  c(as.matrix(AllSims[,grep("JntVarEx1",sim.names)]))
JVE1.labs = c(bquote("R"[J1]^2*"=0.05, p"[1]*"="*.(p1)), bquote("R"[J1]^2*"=0.5, p"[1]*"="*.(p1)))
JVE_1 = factor(JVE_1, labels = JVE1.labs, levels = c(0.05, 0.5))
JVE_2 = c(as.matrix(AllSims[,grep("JntVarEx2",sim.names)]))
JVE2.labs = c(bquote("R"[J2]^2*"=0.05, p"[2]*"="*.(p2)), bquote("R"[J2]^2*"=0.5, p"[2]*"="*.(p2)) )
JVE_2 = factor(JVE_2, labels = JVE2.labs, levels = c(0.05, 0.5))
IVE_1 = c(as.matrix(AllSims[,grep("Indiv.Var.Exp.X", sim.names)]))
IVE_1 = round(as.numeric(IVE_1), 2)
IVE_2 = c(as.matrix(AllSims[,grep("Indiv.Var.Exp.Y", sim.names)]))
IVE_2 = round(as.numeric(IVE_2), 2)
if("True.Joint.Rank" %in% sim.names){
sim.names.2 = sim.names[-grep("True.Joint.Rank", sim.names)]
AllSims.2 = AllSims[,which(sim.names %in% sim.names.2)]
Method = sim.names.2[grep("Joint.Rank", sim.names.2)]
temp = colnames(AllSims.2)
Rank = factor(c(as.matrix(AllSims.2[,temp[grep("Joint.Rank", temp)]])))
} else {
Method = sim.names[grep("Joint.Rank", sim.names)]
Rank = factor(c(as.matrix(AllSims[,grep("Joint.Rank", sim.names)])))
}
Method = sub(".Joint.Rank", "", Method, fixed = TRUE);  Method = sub("aJI", "AJI", Method, fixed = TRUE)
Method = sub("Correct", "", Method, fixed = TRUE); Method = sub(".Wrong", "-Over", Method, fixed = TRUE)
Method = sub(".oracle", "-Oracle", Method, fixed = TRUE); Method = sub(".over", "-Over", Method, fixed = TRUE)
Method = sub("Elbow", "Oracle", Method, fixed = TRUE); Method = sub(".95.", "-Over", Method, fixed = TRUE)
Method = sub("iJI", "R.JI", Method, fixed = TRUE); Method = sub("AJIVE.", "AJIVE-", Method, fixed = TRUE)
Method = sub("CC", "CJIVE", Method, fixed = TRUE); Method = sub("cJIVE", "CJIVE", Method, fixed = TRUE)
Method[which(Method == "CJIVE.Oracle")] = "CJIVE-Oracle"
Method[which(Method %in% c("CJIVE.Over", "cJIVE.Over"))] = "CJIVE-Over"
Method = as.factor(Method)
levels(Method) = c(bquote("AJIVE-r"[k]), "AJIVE-Over", bquote("CJIVE-r"[k]),"CJIVE-Over","R.JIVE.Free")
Method = sub(".Joint.Rank", "", Method, fixed = TRUE);  Method = sub("aJI", "AJI", Method, fixed = TRUE)
Method = sub("Correct", "", Method, fixed = TRUE); Method = sub(".Wrong", "-Over", Method, fixed = TRUE)
Method = sub(".oracle", "-Oracle", Method, fixed = TRUE); Method = sub(".over", "-Over", Method, fixed = TRUE)
Method = sub("Elbow", "Oracle", Method, fixed = TRUE); Method = sub(".95.", "-Over", Method, fixed = TRUE)
Method = sub("iJI", "R.JI", Method, fixed = TRUE); Method = sub("AJIVE.", "AJIVE-", Method, fixed = TRUE)
Method = sub("CC", "CJIVE", Method, fixed = TRUE); Method = sub("cJIVE", "CJIVE", Method, fixed = TRUE)
Method[which(Method == "CJIVE.Oracle")] = "CJIVE-Oracle"
Method[which(Method %in% c("CJIVE.Over", "cJIVE.Over"))] = "CJIVE-Over"
Method = as.factor(Method)
levels(Method)
length( c(bquote("AJIVE-r"[k]), "AJIVE-Over", bquote("CJIVE-r"[k]),"CJIVE-Over","R.JIVE.Free"))
length(levels(Method))
if("True.Joint.Rank" %in% sim.names){
sim.names.2 = sim.names[-grep("True.Joint.Rank", sim.names)]
AllSims.2 = AllSims[,which(sim.names %in% sim.names.2)]
Method = sim.names.2[grep("Joint.Rank", sim.names.2)]
temp = colnames(AllSims.2)
Rank = factor(c(as.matrix(AllSims.2[,temp[grep("Joint.Rank", temp)]])))
} else {
Method = sim.names[grep("Joint.Rank", sim.names)]
Rank = factor(c(as.matrix(AllSims[,grep("Joint.Rank", sim.names)])))
}
Method = sub(".Joint.Rank", "", Method, fixed = TRUE);  Method = sub("aJI", "AJI", Method, fixed = TRUE)
Method = sub("Correct", "", Method, fixed = TRUE); Method = sub(".Wrong", "-Over", Method, fixed = TRUE)
Method = sub(".oracle", "-Oracle", Method, fixed = TRUE); Method = sub(".over", "-Over", Method, fixed = TRUE)
Method = sub("Elbow", "Oracle", Method, fixed = TRUE); Method = sub(".95.", "-Over", Method, fixed = TRUE)
Method = sub("iJI", "R.JI", Method, fixed = TRUE); Method = sub("AJIVE.", "AJIVE-", Method, fixed = TRUE)
Method = sub("CC", "CJIVE", Method, fixed = TRUE); Method = sub("cJIVE", "CJIVE", Method, fixed = TRUE)
Method[which(Method == "CJIVE.Oracle")] = "CJIVE-Oracle"
Method[which(Method %in% c("CJIVE.Over", "cJIVE.Over"))] = "CJIVE-Over"
Method = as.factor(Method)
levels(Method)
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
?recode_factor
?scale_fill_discrete
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
#################################################################################################################################
#########################################    Examine results of JIVE analyses on HCP data  ######################################
##################################   on Corr from fMRI and Streamline counts from DTI      ######################################
######################       NOTES: Additional measures of SC can be found in the original dataset, stored in MATLAB format. ####
######################  Author: Raphiel J. Murden; Advised by Dr. Ben Risk                                               ########
#################################################################################################################################
library(dplyr); library(mgcv); library(MASS); library(ICC); library(psych); library(lme4); library(arsenal)
library(RColorBrewer); library(grid); library(gridExtra); library(reshape); library(scales); library(itsadug)
library(tidymv); library(wesanderson); library(matlab); library(lubridate); library(r.jive); library(rsq)
# library(ajive)
set.seed(0)
# prog.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Programs"
# results.a.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Results/AJIVE_DesikanDesikan"
# results.c.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Results/CJIVE_DesikanDesikan"
# dat.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Data/
results.a.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Results/AJIVE_DesikanDesikan"
results.c.dir = "H:/My Documents/FunctionalVsStructuralConnectiviy/Results/CJIVE_DesikanDesikan"
prog.dir = "H:/My Documents/FunctionalVsStructuralConnectivity/Programs/"
results.dir = "H:/My Documents/FunctionalVsStructuralConnectivity/Results/DesikanFC_v_DesikanSC"
dat.dir = "H:/My Documents/FunctionalVsStructuralConnectivity/Data"
atlas.dir = file.path(dat.dir, "Atlases")
# imgs.fldr=results.dir
# imgs.fldr = "H:/My Documents/FunctionalVsStructuralConnectivity/Results/DesikanFC_v_DesikanSC"
imgs.fldr = "H:/My Documents/Apps/Overleaf/CJIVE Manuscript/Images"
cb.cols = c("#112e51", "#205493", "#0071bc", "#046b99", "#2e8540", "#4c2c92", "#212121",
"#323a45", "#5b616b", "#494440", "#981b1e", "#cd2026", "#e31c3d", "#cc9900",
"#ff9933", "#ff33cc", "#33ccff", "#cc0099", "#ff99cc", "#990099", "#33ffcc")
########Load SConn and FConn Data
sconn = read.csv(file.path(dat.dir, "SConn_Desikan.csv"), header = F) ##data are stored in p-by-n format
fconn = read.csv(file.path(dat.dir, "Z_TransCorrFC_Desikan.csv"), header = F) ##data are stored in p-by-n format
H:\My Documents\FunctionalVsStructuralConnectivity\Data
##Remove columns corresponding to edges of 0 stream counts for at least 99% of participants
cols.rm = which(apply(sconn,2,function(x) quantile(x,0.99))==0)
sconn.non0 = sconn[,-cols.rm]
sconn.log = log(sconn.non0 + 1)
sconn.cent = scale(sconn.log)
dat.blocks = list(fconn.cent, sconn.cent)
dat.blocks.t = lapply(dat.blocks, t)
###Center Fconn, then transform and center Sconn data
fconn.cent = scale(fconn)
##Remove columns corresponding to edges of 0 stream counts for at least 99% of participants
cols.rm = which(apply(sconn,2,function(x) quantile(x,0.99))==0)
sconn.non0 = sconn[,-cols.rm]
sconn.log = log(sconn.non0 + 1)
sconn.cent = scale(sconn.log)
dat.blocks = list(fconn.cent, sconn.cent)
dat.blocks.t = lapply(dat.blocks, t)
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
library(CJIVE)
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
sig.ranks = c(r.FC, r.SC)
r.FC = 2; r.SC = 40
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
sig.ranks = c(r.FC, r.SC)
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
library(CJIVE)
library(CJIVE)
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
library(CJIVE)
#################################################################################################################################
#########################################        Conduct JIVE analyses of HCP data:        ######################################
##################################      Corr from fMRI and Streamline counts from DTI      ######################################
######################  Author: Raphiel J. Murden; Advised by Dr. Ben Risk                                               ########
######################
# Notes
# 01 JUNE 2022: Paper was submitted to JRSSC in April 2021. After 13.5 months we have not received reviews.
#               Script is being reviewed and restructured for easier reproducibility. After revision the
#               script will be posted to GitHub.
#################################################################################################################################
library(dplyr); library(mgcv); library(MASS); library(ICC); library(psych); library(lme4); library(arsenal)
library(RColorBrewer); library(grid); library(gridExtra); library(reshape); library(scales)
set.seed(0)
prog.dir = "H:/My Documents/FunctionalVsStructuralConnectivity/Programs/"
dat.dir = "H:/My Documents/FunctionalVsStructuralConnectivity/Data"
imgs.fldr = "H:/My Documents/FunctionalVsStructuralConnectivity/Results"
ajive.dir = "H:/My Documents/Applications2/r_AJIVE/R"
files= list.files(ajive.dir)
for (i in files) source(file.path(ajive.dir, i))
source(file.path(prog.dir, "Functions", "Functions_for_PJIVE.R"))
########Load SConn and FConn Data
sconn = read.csv(file.path(dat.dir, "SConn_Desikan.csv"), header = F) ##data are stored in p-by-n format
fconn = read.csv(file.path(dat.dir, "Z_TransCorrFC_Desikan.csv"), header = F) ##data are stored in p-by-n format
# load(file.path(dat.dir, "fconn.RData")) #data matrix is called fconn
# save(fconn, file = file.path(dat.dir, "fconn_cluster.RData"), version = 2) ##data would not load onto cluster bc of R.Version discrepancy
# fconn = fconn[FC_indices[,1],] ##Reduce FC matrix to only subjects with SC data
###Center Fconn, then transform and center Sconn data
fconn.cent = scale(fconn, scale = F)
sconn.sd = apply(sconn, 2, sd) #take SD of columns/edges
sconn.non0 = sconn[,sconn.sd!=0] #remove columns where SD = 0
# ncol(sconn) - ncol(sconn.non0) #reduces the number of edges by 1025
sconn.log = log(sconn.non0 + 1) #take log(sconn + 1)
sconn.cent = scale(sconn.log, scale = F)
library(CJIVE)
r.FC = 2; r.SC = 40
dat.blocks = list(fconn.cent, sconn.cent)
dat.blocks.t = lapply(dat.blocks, t)
sig.ranks = c(r.FC, r.SC)
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
r.J = res$CanCorRes$Jnt_Rank
print(paste0("CJIVE with scree plot ranks r.FC=7 & r.SC = 10 found joint rank ",
c.s.res$CanCorRes$Jnt_Rank, ". Run-time was ", round(c.s.time['elapsed'], 1), " sec." ))
print(paste0("CJIVE with scree plot ranks r.FC=7 & r.SC = 10 found joint rank ",
res$CanCorRes$Jnt_Rank, ". Run-time was ", round(c.time['elapsed'], 1), " sec." ))
print(paste0("CJIVE with scree plot ranks r.FC=", r.FC, " &  r.SC=", r.SC, " = 10 found joint rank ",
res$CanCorRes$Jnt_Rank, ". Run-time was ", round(c.time['elapsed'], 1), " sec." ))
print(paste0("CJIVE with scree plot ranks r.FC=", r.FC, " &  r.SC=", r.SC, " found joint rank ",
res$CanCorRes$Jnt_Rank, ". Run-time was ", round(c.time['elapsed'], 1), " sec." ))
a.time = system.time({res = ajive(dat.blocks, sig.ranks)})
a.time = system.time({res = ajive(dat.blocks, sig.ranks, joint_rank = 0)})
a.time = system.time({res = ajive(dat.blocks, sig.ranks, joint_rank = 0)})
source("H:/My Documents/Applications2/r_AJIVE/R/ajive_decomposition.R")
a.time = system.time({res = ajive(dat.blocks, sig.ranks, joint_rank = 0)})
debugSource("H:/My Documents/Applications2/r_AJIVE/R/ajive_decomposition.R")
a.time = system.time({res = ajive(dat.blocks, sig.ranks, joint_rank = 0)})
ifelse(sum(is.na(joint_scores))>0, signal_rank, signal_rank - ncol(joint_scores))
signal_rank
indiv_rank
indiv_rank <- ifelse(sum(is.na(joint_scores))>0, signal_rank, signal_rank - ncol(joint_scores))
indiv_decomposition <- truncate_svd(decomposition=indiv_decomposition, rank=indiv_rank)
source("H:/My Documents/Applications2/r_AJIVE/R/ajive_decomposition.R")
a.time = system.time({res = ajive(dat.blocks, sig.ranks, joint_rank = 0)})
>jive
>jive?
?jive
library(r.jive)
?jive
r.I
r.J = res$CanCorRes$Jnt_Rank
r.I = sig.ranks- r.J
r.J
c.time = system.time({res = cc.jive(dat.blocks, sig.ranks)})
r.J = res$CanCorRes$Jnt_Rank
r.I = sig.ranks- r.J
r.time = system.time({res = jive(dat.blocks.t, rankJ = r.J, rankA = r.I, method = "given")})
3408.3/60
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
source("~/GitHub/CJIVE/CJIVE/R/SimulationStudyFunctions.R")
library(CJIVE)
library(CJIVE)
devtools::load_all(".")
library(CJIVE)
devtools::load_all(".")
devtools::build_win
??build_win
